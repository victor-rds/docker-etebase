---
name: Test GH script

on:
  workflow_dispatch:
    inputs:
      version:
        description: "EteBase Version"
        required: false
        default: "master"
        type: string
      pushit:
        description: "Should push?"
        required: false
        default: false
        type: boolean
      tag:
        description: "Custom Tag"
        required: false
        default: ""
        type: string

jobs:
  run-ghscript:
    runs-on: ubuntu-latest
    outputs:
      ete_version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout Version and Workflow files
        uses: actions/checkout@v4

      - id: get_version
        name: Get Server Version
        uses: ./.github/actions/get-server-version
        with:
          version: ${{ inputs.version }}

      - id: process_version
        name: Process Version data
        uses: ./.github/actions/process-version
        with:
          version: ${{ steps.get_version.outputs.version }}

      - name: Metadata Output
        shell: bash
        run: |
          echo '########## inputs ##########'
          echo "version: ${{ github.event.inputs.version }}"
          echo "tag: ${{ github.event.inputs.tag }}"
          echo "pushit: ${{ github.event.inputs.pushit }}"

          echo '########## ete-version ##########'
          echo "ete-version: ${{ steps.get_version.outputs.version }}"

          echo '########## server_version ##########'
          echo "etebase: ${{ steps.process_version.outputs.ete_version }}"
          echo "semver: ${{ steps.process_version.outputs.is_semver }}"
          echo "python: v${{ steps.process_version.outputs.py_version }}"

      - id: ghscript
        uses: actions/github-script@v7
        with:
          retries: 3
          retry-exempt-status-codes: 400,401,404
          script: |
            const util = require('util')

            const vEB = '${{ steps.process_version.outputs.version }}'
            const vPY = '${{ steps.process_version.outputs.py_version }}'

            const tag = `${vEB}-py${vPY}`
            //`${vEB}-py${vPY}-${context.sha.substring(0,7)}`

            let resp
            try {
              resp = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tag}`
              });
              core.info('Tag found');
            } catch(e) {
              core.info('Tag not found');
            }

            if(resp) {
              if(resp.data.object.sha === context.sha) {
                core.info('Current Tag up to date');
              } else {
                resp = await github.rest.git.updateRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${tag}`,
                  sha: context.sha,
                  force: true
                });

                core.info('Core updated to the current commit');
              }
            } else {
              resp = await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag}`,
                sha: context.sha
              })

              core.info('Creating Tag for the current commit');
            }

            console.log(util.inspect(resp, { showHidden: false, depth: null, colors: true }))

            let respRelease = github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              prerelease: true,
              generate_release_notes: true
            });
